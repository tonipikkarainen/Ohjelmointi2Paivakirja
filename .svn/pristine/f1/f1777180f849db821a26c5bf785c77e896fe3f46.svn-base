
package paivakirja;

import java.io.OutputStream;
import java.io.PrintStream;

import fi.jyu.mit.ohj2.Mjonot;





/**
 * Luokka yksittäisille harjoituksille. 
 * Annetaan harjoitukselle esim. id-numero.
 * @author tonipikkarainen
 * @version 23.2.2016
 *
 */
public class Harjoitus {
    
    private int idNumero;
    private String pvm;
    private String soinnut;
    private String saveltapailu;
    private String tekniikka;
    private int kesto_min;
    
    private static int seuraavaId=1;

    
    /**
     * Tulostus
     * @param os mihin tulostetaan
     */
    public void tulosta(OutputStream os){
        tulosta(new PrintStream(os));
    }
    
    
    /**
     * Tulostetaan harjoituksen tiedot
     * @param out mihin tulostetaan
     */
    public void tulosta(PrintStream out){
        out.println(String.format("%03d", idNumero));
        out.println(pvm);
        out.println(" "+soinnut);
        out.println(" "+saveltapailu);
        out.println(" "+tekniikka);
        out.println(" "+
        String.format("%03d", kesto_min));       
    }
    
    
    /**
     * Selvitetään id
     * @return id kokonaislukuna
     */
    public int getIdNumero(){
        return idNumero;
    }
    
    public void setIdNumero(int id){
        idNumero = id;
        if (idNumero >= seuraavaId) seuraavaId= idNumero + 1;
    }
    
    
    /**
     * Rekistöidään harjoitus, kasvatetaan id:tä
     * @return idNumero (kokonaisluku)
     * @example
     * <pre name="test">
     * Harjoitus harj1 = new Harjoitus();
     * harj1.getIdNumero() === 0;
     * harj1.rekisteroi();
     * Harjoitus harj2 = new Harjoitus();
     * harj2.rekisteroi();
     * int a = harj1.getIdNumero();
     * int b = harj2.getIdNumero();
     * b - a === 1;
     * </pre>
     */
    public int rekisteroi() {
        if(idNumero > 0) return idNumero;
        idNumero = seuraavaId;
        seuraavaId++;
        return idNumero;
    }
    
    
    /**
     * Haetaan päivämäärä
     * @return päivämäärä stringinä
     */
    public String getPvm() {
        return pvm;
    }
    
    
    /**
     * Ekaa harjoitusta vastaavat tiedot
     */
    public void vastaaEkaHarj(){
        soinnut = "Billie´s Bounce";
        saveltapailu = "";
        tekniikka = "pikkaus";
        kesto_min = kanta.Arpominen.rand(30,180);
        pvm = " "+kanta.Arpominen.arvoPvm();
        
    }
    
    /**
     * Muutetaan harjoitus merkkijonoksi.
     */
    @Override
    public String toString(){
        String rivi = idNumero +" | " +pvm +" | " +
                      soinnut + "  |" + saveltapailu + " | "+
                      tekniikka +" | " +kesto_min ;
                      
        return rivi;
    }
    
    public void setKesto(int kesto){
        kesto_min = kesto;
    }
    
    
    public int getKesto(){
        return kesto_min;
    }
    


    /**
     * Asetetaan tiedot tietyn rivin mukaiseksi
     * @param rivi tuotu rivi
     */
    public void asetaKentat(String rivi) {
       StringBuilder tiedot = new StringBuilder(rivi); //????
       setIdNumero(Mjonot.erota(tiedot, '|', getIdNumero()));
       pvm = Mjonot.erota(tiedot, '|');
       soinnut= Mjonot.erota(tiedot, '|');
       saveltapailu= Mjonot.erota(tiedot, '|');
       tekniikka = Mjonot.erota(tiedot, '|');
       setKesto(Mjonot.erota(tiedot, '|', getKesto()));//????
    }
    
    
    /**
     * @param args ei käytössä
     */
    public static void main(String[] args) {
    Harjoitus harj1 = new Harjoitus();
    Harjoitus harj2 = new Harjoitus();
    
    harj1.rekisteroi();
    harj2.rekisteroi();
    
    harj1.vastaaEkaHarj();
    harj2.vastaaEkaHarj();
    
    harj1.tulosta(System.out);
    harj2.tulosta(System.out);
    
    }



   


   

}
